{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p> <p></p> <p></p> <p>Aqua language, developed for the Computational Logic course, is a language that simulates the natural world through code. To program in this language, it is necessary to create sets of rivers and fish and define the relationships between them. The language consists of two types of declarations: river declarations and fish declarations.</p> <p>If you want to start using and compiling codes on aqua, you can check the Getting Started page and also go to my GitHub repository to get the source code.</p>"},{"location":"#about-the-language","title":"About the language","text":""},{"location":"#motivations","title":"Motivations","text":"<ul> <li>This language was designed to require thinking about the growth curve of populations and river flows.</li> <li>To implement loops and conditionals, it is necessary to consider how populations interact and sometimes exponential growth curves.</li> </ul>"},{"location":"#language-ebnf","title":"Language EBNF","text":"EBNF<pre><code>BLOCK = { STATEMENT };\nSTATEMENT = ( \"\u03bb\" | SPAWN | DISCOVER | SUSTAIN | EVENT | RAIN | DRY | EXTINCTION | OPERATION ), \"\\n\" ;\nSPAWN = TYPE, IDENTIFIER, \"create\", ( \"\u03bb\" | NUMBER | NUMBER, \",\", NUMBER ) ;\nDISCOVER = \"discover\", \"(\", IDENTIFIER, \")\" ;\nSUSTAIN = IDENTIFIER, \"sustains\", IDENTIFIER, \"\\n\", \"\u03bb\", { ( STATEMENT ), \"\u03bb\" }, \"pass_time\" ;\nEVENT = \"event\", IDENTIFIER, COMPARISSON, IDENTIFIER, \"\\n\", \"\u03bb\", { ( STATEMENT ), \"\u03bb\" }, \"conclude\" ;\nRAIN = \"rain\",\"(\", IDENTIFIER, \")\" ;\nDRY = \"dry\",\"(\", IDENTIFIER, \")\" ;\nEXTINCTION = \"extinguish\", IDENTIFIER ; \nOPERATION = IDENTIFIER, OP_T, NUMBER, ( \"\u03bb\" | OP_T, IDENTIFIER ) ;\nIDENTIFIER = LETTER, { LETTER | DIGIT | \"_\" } ;\nNUMBER = DIGIT, { DIGIT } ;\nLETTER = ( \"a\" | \"...\" | \"z\" | \"A\" | \"...\" | \"Z\" ) ;\nDIGIT = ( \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"0\" );\nTYPE = ( \"river\" | \"fish\" ) ;\nOP_T = ( \"branch\" | \"acumulate\" | \"&gt;&gt;\" | \"-&gt;\" ) ;\n</code></pre>"},{"location":"#language-sintatic-diagram","title":"Language sintatic diagram","text":"<p> <p></p> <p></p>"},{"location":"#characteristics","title":"Characteristics","text":"<ul> <li>There are 2 types of variables: Rivers and Fish.</li> <li>Variables do not support negative values.</li> <li>It is possible to work with rational numbers if desired, but most operations only handle integers.</li> <li>River variables store the flow, and fish variables store the population and the amount each unit consumes per cycle (tuple).</li> <li> <p>Once created, rivers and fish exist until they become extinct, and until then, they cannot be redeclared.</p> </li> <li> <p>Loops represented by \"sustains\" work as follows: Loop sintax<pre><code>    X sustains Y  \n    ...  \n    pass_time  \n</code></pre> Where: <ul> <li>X is a fish or a river  </li> <li>Y is a fish   </li> </ul> <p>Loop Calculation: <pre><code>Y[0] is the population or flow, and Y[1] is the consumption per unit  \nLoop while \ud835\udc4b[0] &gt; 0  \nAt the beginning of each iteration:  \n\ud835\udc51\ud835\udc56\ud835\udc53 = \ud835\udc4b[0] \u2212 \ud835\udc4c[0] \u00d7 \ud835\udc4c[1]  \n\ud835\udc60\ud835\udc62\ud835\udc4f = \ud835\udc51\ud835\udc56\ud835\udc53 if \ud835\udc51\ud835\udc56\ud835\udc53 &gt; 0, otherwise \ud835\udc60\ud835\udc62\ud835\udc4f = 0  \n\ud835\udc4c[0] = \ud835\udc4c[0] + (\ud835\udc4c[0] \u2212 \ud835\udc4c[0] % 2) + \ud835\udc60\ud835\udc62\ud835\udc4f  \n\ud835\udc4b[0] = \ud835\udc4b[0] \u2212 (\ud835\udc4c[0] \u00d7 Y[1])\n</code></pre>"},{"location":"#explaining-the-loop","title":"Explaining the Loop","text":"<ul> <li>The loop is designed to simulate the fact that one population serves as food for another, and therefore one must consume the other to grow.</li> <li>If there isn't enough food, the loop ends, and the predator population doesn't fully grow if it hasn't fed its entire population (function of sub).</li> <li>Every time a population grows, only pairs are considered, as fish do not reproduce alone (hence the subtraction by pop % 2).</li> </ul>"},{"location":"#comented-example","title":"Comented example","text":"Example<pre><code>river x create 10 -- creates a river with 10 units of water\n\nriver y create 10\n\nx &gt;&gt; 5 &gt;&gt; y -- River x transfers 5 units of water to river y\ndiscover(x) -- prints 5\ndiscover(y) -- prints 15\n\nx branch 5 -- River x splits into 5 rivers\ndiscover(x) -- prints 1\ny &gt;&gt; 1 &gt;&gt; x -- River y transfers 1 unit of water to river x\nx accumulate 5 -- x = x * 5 (river x accumulates 5 times the amount of water it has)\n\nfish z create 2,1 -- creates a population of 2 that consumes 1 per individual\nfish f create 1,1 -- creates a population of 1 that consumes 1 per individual\n\nx sustains z: -- while x sustains z\n-- to sustain z, x must be greater than 0, and z consumes (reduces the value of) x by the amount of its (z_consumption * z_population) and increases its number by (z_population = z_population + (z_population - z_population % 2) + sub)\n-- sub = dif if dif &gt; 0 else 0\n-- dif = x_population - z_population * z_consumption\ny &gt;&gt; 1 &gt;&gt; x:\nf -&gt; z -- f consumes z to increase its number in the same way as sustains\nevent z inf f -- if the population of z is less than f, an event is triggered\nextinguish f -- f is extinguished (delete f)\nconclude -- end of event\npass_time -- time passes (the loop restarts)\n\nrain(y) -- all rivers receive a water value equivalent to the amount in y\n\ndry(x) -- all rivers lose a water value equivalent to the amount in x\n</code></pre>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#dowload-the-source-code","title":"Dowload the source code","text":"<p>You can download the source code from my GitHub repository.</p>"},{"location":"getting_started/#folder-structure","title":"Folder structure","text":"<p>The project is organized as follows:</p> <pre><code>.\n\u251c\u2500\u2500 docs\n\u2502\n\u251c\u2500\u2500 Compiler\n|\n\u251c\u2500\u2500 FlexBisonV2\n</code></pre> <ul> <li>The <code>docs</code> folder contains the documentation of the project.</li> <li>The <code>Compiler</code> folder contains the source code of the compiler. The most recent version, uses a python written lexical and syntactic analyzer instead of the flex and bison tools.</li> <li>The <code>FlexBisonV2</code> folder contains the source code of the lexical and syntactic analyzers, that besides being complete, still have no integration with the rest of the compiler.</li> </ul>"},{"location":"getting_started/#compiling-the-code","title":"Compiling the code","text":"<p>Each folder contains in its respective README file the instructions for compiling the code.</p> <p>In order to use the compiler, the only requirement is to have python installed on your machine.</p> <p>For the lexical and syntactic analyzers, you will need to have gcc, flex and bison installed on your machine.</p>"},{"location":"next_steps/","title":"Next steps","text":""},{"location":"next_steps/#1-major-improvements","title":"1. Major improvements","text":""},{"location":"next_steps/#11-improve-code-standardization","title":"1.1. Improve code standardization","text":"<p>The code has already been refactored to improve its readability and maintainability. However, there are still some parts of the code that need to be improved. The main points are:</p> <ul> <li>Improve the code comments.</li> <li>Improve the code documentation.</li> <li>Improve the code structure.</li> </ul>"},{"location":"next_steps/#12-improve-the-error-handling","title":"1.2. Improve the error handling","text":"<p>The error handling is still very basic. The compiler needs to be able to handle errors more effectively. The main points are:</p> <ul> <li>Improve the error messages.</li> <li>Improve the error handling.</li> <li>Improve the error recovery.</li> </ul>"},{"location":"next_steps/#2-integrate-the-compiler-with-the-flex-and-bison-tools","title":"2. Integrate the Compiler with the flex and bison tools","text":"<p>At the current stage, the aqua complier is using a python written lexical and syntactic analyzer. The next step is to integrate the compiler with the flex and bison tools, using some kind of virtual machine to run the code.</p>"}]}